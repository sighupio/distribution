// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package private

import "fmt"
import "encoding/json"
import "reflect"

// A Fury Cluster deployed through AWS's Elastic Kubernetes Service
type EksclusterKfdV1Alpha2 struct {
	// ApiVersion corresponds to the JSON schema field "apiVersion".
	ApiVersion string `json:"apiVersion" yaml:"apiVersion"`

	// Kind corresponds to the JSON schema field "kind".
	Kind EksclusterKfdV1Alpha2Kind `json:"kind" yaml:"kind"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata Metadata `json:"metadata" yaml:"metadata"`

	// Spec corresponds to the JSON schema field "spec".
	Spec Spec `json:"spec" yaml:"spec"`
}

type EksclusterKfdV1Alpha2Kind string

const EksclusterKfdV1Alpha2KindEKSCluster EksclusterKfdV1Alpha2Kind = "EKSCluster"

type Metadata struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`
}

type Spec struct {
	// Distribution corresponds to the JSON schema field "distribution".
	Distribution SpecDistribution `json:"distribution" yaml:"distribution"`

	// DistributionVersion corresponds to the JSON schema field "distributionVersion".
	DistributionVersion TypesSemVer `json:"distributionVersion" yaml:"distributionVersion"`

	// Infrastructure corresponds to the JSON schema field "infrastructure".
	Infrastructure *SpecInfrastructure `json:"infrastructure,omitempty" yaml:"infrastructure,omitempty"`

	// Kubernetes corresponds to the JSON schema field "kubernetes".
	Kubernetes SpecKubernetes `json:"kubernetes" yaml:"kubernetes"`

	// Region corresponds to the JSON schema field "region".
	Region TypesAwsRegion `json:"region" yaml:"region"`

	// Tags corresponds to the JSON schema field "tags".
	Tags TypesAwsTags `json:"tags,omitempty" yaml:"tags,omitempty"`

	// ToolsConfiguration corresponds to the JSON schema field "toolsConfiguration".
	ToolsConfiguration SpecToolsConfiguration `json:"toolsConfiguration" yaml:"toolsConfiguration"`
}

type SpecDistribution struct {
	// Common corresponds to the JSON schema field "common".
	Common *SpecDistributionCommon `json:"common,omitempty" yaml:"common,omitempty"`

	// Modules corresponds to the JSON schema field "modules".
	Modules SpecDistributionModules `json:"modules" yaml:"modules"`
}

type SpecDistributionCommon struct {
	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector TypesKubeNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty"`

	// Provider corresponds to the JSON schema field "provider".
	Provider *SpecDistributionCommonProvider `json:"provider,omitempty" yaml:"provider,omitempty"`

	// RelativeVendorPath corresponds to the JSON schema field "relativeVendorPath".
	RelativeVendorPath *string `json:"relativeVendorPath,omitempty" yaml:"relativeVendorPath,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []TypesKubeToleration `json:"tolerations,omitempty" yaml:"tolerations,omitempty"`
}

type SpecDistributionCommonProvider struct {
	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type"`
}

type SpecDistributionModules struct {
	// Auth corresponds to the JSON schema field "auth".
	Auth *SpecDistributionModulesAuth `json:"auth,omitempty" yaml:"auth,omitempty"`

	// Aws corresponds to the JSON schema field "aws".
	Aws *SpecDistributionModulesAws `json:"aws,omitempty" yaml:"aws,omitempty"`

	// Dr corresponds to the JSON schema field "dr".
	Dr SpecDistributionModulesDr `json:"dr" yaml:"dr"`

	// Ingress corresponds to the JSON schema field "ingress".
	Ingress SpecDistributionModulesIngress `json:"ingress" yaml:"ingress"`

	// Logging corresponds to the JSON schema field "logging".
	Logging SpecDistributionModulesLogging `json:"logging" yaml:"logging"`

	// Monitoring corresponds to the JSON schema field "monitoring".
	Monitoring *SpecDistributionModulesMonitoring `json:"monitoring,omitempty" yaml:"monitoring,omitempty"`

	// Policy corresponds to the JSON schema field "policy".
	Policy *SpecDistributionModulesPolicy `json:"policy,omitempty" yaml:"policy,omitempty"`
}

type SpecDistributionModulesAuth struct {
	// BaseDomain corresponds to the JSON schema field "baseDomain".
	BaseDomain *string `json:"baseDomain,omitempty" yaml:"baseDomain,omitempty"`

	// Dex corresponds to the JSON schema field "dex".
	Dex *SpecDistributionModulesAuthDex `json:"dex,omitempty" yaml:"dex,omitempty"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *SpecDistributionModulesAuthOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`

	// Pomerium corresponds to the JSON schema field "pomerium".
	Pomerium *SpecDistributionModulesAuthPomerium `json:"pomerium,omitempty" yaml:"pomerium,omitempty"`

	// Provider corresponds to the JSON schema field "provider".
	Provider SpecDistributionModulesAuthProvider `json:"provider" yaml:"provider"`
}

type SpecDistributionModulesAuthDex struct {
	// Connectors corresponds to the JSON schema field "connectors".
	Connectors []interface{} `json:"connectors" yaml:"connectors"`
}

type SpecDistributionModulesAuthOverrides struct {
	// Ingresses corresponds to the JSON schema field "ingresses".
	Ingresses SpecDistributionModulesAuthOverridesIngresses `json:"ingresses,omitempty" yaml:"ingresses,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector TypesKubeNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []TypesKubeToleration `json:"tolerations,omitempty" yaml:"tolerations,omitempty"`
}

type SpecDistributionModulesAuthOverridesIngress struct {
	// Host corresponds to the JSON schema field "host".
	Host string `json:"host" yaml:"host"`

	// IngressClass corresponds to the JSON schema field "ingressClass".
	IngressClass string `json:"ingressClass" yaml:"ingressClass"`
}

type SpecDistributionModulesAuthOverridesIngresses map[string]SpecDistributionModulesAuthOverridesIngress

type SpecDistributionModulesAuthPomerium struct {
	// Policy corresponds to the JSON schema field "policy".
	Policy string `json:"policy" yaml:"policy"`

	// Secrets corresponds to the JSON schema field "secrets".
	Secrets SpecDistributionModulesAuthPomeriumSecrets `json:"secrets" yaml:"secrets"`
}

type SpecDistributionModulesAuthPomeriumSecrets struct {
	// COOKIESECRET corresponds to the JSON schema field "COOKIE_SECRET".
	COOKIESECRET string `json:"COOKIE_SECRET" yaml:"COOKIE_SECRET"`

	// IDPCLIENTSECRET corresponds to the JSON schema field "IDP_CLIENT_SECRET".
	IDPCLIENTSECRET string `json:"IDP_CLIENT_SECRET" yaml:"IDP_CLIENT_SECRET"`

	// SHAREDSECRET corresponds to the JSON schema field "SHARED_SECRET".
	SHAREDSECRET string `json:"SHARED_SECRET" yaml:"SHARED_SECRET"`
}

type SpecDistributionModulesAuthProvider struct {
	// BasicAuth corresponds to the JSON schema field "basicAuth".
	BasicAuth *SpecDistributionModulesAuthProviderBasicAuth `json:"basicAuth,omitempty" yaml:"basicAuth,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type SpecDistributionModulesAuthProviderType `json:"type" yaml:"type"`
}

type SpecDistributionModulesAuthProviderBasicAuth struct {
	// Password corresponds to the JSON schema field "password".
	Password string `json:"password" yaml:"password"`

	// Username corresponds to the JSON schema field "username".
	Username string `json:"username" yaml:"username"`
}

type SpecDistributionModulesAuthProviderType string

const SpecDistributionModulesAuthProviderTypeBasicAuth SpecDistributionModulesAuthProviderType = "basicAuth"
const SpecDistributionModulesAuthProviderTypeNone SpecDistributionModulesAuthProviderType = "none"
const SpecDistributionModulesAuthProviderTypeSso SpecDistributionModulesAuthProviderType = "sso"

type SpecDistributionModulesAws struct {
	// ClusterAutoscaler corresponds to the JSON schema field "clusterAutoscaler".
	ClusterAutoscaler *SpecDistributionModulesAwsClusterAutoScaler `json:"clusterAutoscaler,omitempty" yaml:"clusterAutoscaler,omitempty"`

	// EbsCsiDriver corresponds to the JSON schema field "ebsCsiDriver".
	EbsCsiDriver *SpecDistributionModulesAwsEbsCsiDriver `json:"ebsCsiDriver,omitempty" yaml:"ebsCsiDriver,omitempty"`

	// LoadBalancerController corresponds to the JSON schema field
	// "loadBalancerController".
	LoadBalancerController *SpecDistributionModulesAwsLoadBalancerController `json:"loadBalancerController,omitempty" yaml:"loadBalancerController,omitempty"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *TypesFuryModuleOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`
}

type SpecDistributionModulesAwsClusterAutoScaler struct {
	// IamRoleArn corresponds to the JSON schema field "iamRoleArn".
	IamRoleArn TypesAwsArn `json:"iamRoleArn" yaml:"iamRoleArn"`
}

type SpecDistributionModulesAwsEbsCsiDriver struct {
	// IamRoleArn corresponds to the JSON schema field "iamRoleArn".
	IamRoleArn TypesAwsArn `json:"iamRoleArn" yaml:"iamRoleArn"`
}

type SpecDistributionModulesAwsLoadBalancerController struct {
	// IamRoleArn corresponds to the JSON schema field "iamRoleArn".
	IamRoleArn TypesAwsArn `json:"iamRoleArn" yaml:"iamRoleArn"`
}

type SpecDistributionModulesDr struct {
	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *TypesFuryModuleOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`

	// Velero corresponds to the JSON schema field "velero".
	Velero SpecDistributionModulesDrVelero `json:"velero" yaml:"velero"`
}

type SpecDistributionModulesDrVelero struct {
	// Eks corresponds to the JSON schema field "eks".
	Eks SpecDistributionModulesDrVeleroEks `json:"eks" yaml:"eks"`
}

type SpecDistributionModulesDrVeleroEks struct {
	// BucketName corresponds to the JSON schema field "bucketName".
	BucketName TypesAwsS3BucketName `json:"bucketName" yaml:"bucketName"`

	// IamRoleArn corresponds to the JSON schema field "iamRoleArn".
	IamRoleArn TypesAwsArn `json:"iamRoleArn" yaml:"iamRoleArn"`

	// Region corresponds to the JSON schema field "region".
	Region TypesAwsRegion `json:"region" yaml:"region"`
}

type SpecDistributionModulesIngress struct {
	// BaseDomain corresponds to the JSON schema field "baseDomain".
	BaseDomain string `json:"baseDomain" yaml:"baseDomain"`

	// CertManager corresponds to the JSON schema field "certManager".
	CertManager *SpecDistributionModulesIngressCertManager `json:"certManager,omitempty" yaml:"certManager,omitempty"`

	// Dns corresponds to the JSON schema field "dns".
	Dns SpecDistributionModulesIngressDNS `json:"dns" yaml:"dns"`

	// ExternalDns corresponds to the JSON schema field "externalDns".
	ExternalDns *SpecDistributionModulesIngressExternalDNS `json:"externalDns,omitempty" yaml:"externalDns,omitempty"`

	// Nginx corresponds to the JSON schema field "nginx".
	Nginx SpecDistributionModulesIngressNginx `json:"nginx" yaml:"nginx"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *SpecDistributionModulesIngressOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`
}

type SpecDistributionModulesIngressCertManager struct {
	// ClusterIssuer corresponds to the JSON schema field "clusterIssuer".
	ClusterIssuer SpecDistributionModulesIngressCertManagerClusterIssuer `json:"clusterIssuer" yaml:"clusterIssuer"`
}

type SpecDistributionModulesIngressCertManagerClusterIssuer struct {
	// Email corresponds to the JSON schema field "email".
	Email string `json:"email" yaml:"email"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Route53 corresponds to the JSON schema field "route53".
	Route53 *SpecDistributionModulesIngressClusterIssuerRoute53 `json:"route53,omitempty" yaml:"route53,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type SpecDistributionModulesIngressCertManagerClusterIssuerType `json:"type" yaml:"type"`
}

type SpecDistributionModulesIngressCertManagerClusterIssuerType string

const SpecDistributionModulesIngressCertManagerClusterIssuerTypeDns01 SpecDistributionModulesIngressCertManagerClusterIssuerType = "dns01"
const SpecDistributionModulesIngressCertManagerClusterIssuerTypeHttp01 SpecDistributionModulesIngressCertManagerClusterIssuerType = "http01"

type SpecDistributionModulesIngressClusterIssuerRoute53 struct {
	// HostedZoneId corresponds to the JSON schema field "hostedZoneId".
	HostedZoneId string `json:"hostedZoneId" yaml:"hostedZoneId"`

	// IamRoleArn corresponds to the JSON schema field "iamRoleArn".
	IamRoleArn TypesAwsArn `json:"iamRoleArn" yaml:"iamRoleArn"`

	// Region corresponds to the JSON schema field "region".
	Region TypesAwsRegion `json:"region" yaml:"region"`
}

type SpecDistributionModulesIngressDNS struct {
	// Private corresponds to the JSON schema field "private".
	Private SpecDistributionModulesIngressDNSPrivate `json:"private" yaml:"private"`

	// Public corresponds to the JSON schema field "public".
	Public SpecDistributionModulesIngressDNSPublic `json:"public" yaml:"public"`
}

type SpecDistributionModulesIngressDNSPrivate struct {
	// Create corresponds to the JSON schema field "create".
	Create bool `json:"create" yaml:"create"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// VpcId corresponds to the JSON schema field "vpcId".
	VpcId string `json:"vpcId" yaml:"vpcId"`
}

type SpecDistributionModulesIngressDNSPublic struct {
	// Create corresponds to the JSON schema field "create".
	Create bool `json:"create" yaml:"create"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`
}

type SpecDistributionModulesIngressExternalDNS struct {
	// PrivateIamRoleArn corresponds to the JSON schema field "privateIamRoleArn".
	PrivateIamRoleArn TypesAwsArn `json:"privateIamRoleArn" yaml:"privateIamRoleArn"`

	// PublicIamRoleArn corresponds to the JSON schema field "publicIamRoleArn".
	PublicIamRoleArn TypesAwsArn `json:"publicIamRoleArn" yaml:"publicIamRoleArn"`
}

type SpecDistributionModulesIngressNginx struct {
	// Tls corresponds to the JSON schema field "tls".
	Tls *SpecDistributionModulesIngressNginxTLS `json:"tls,omitempty" yaml:"tls,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type SpecDistributionModulesIngressNginxType `json:"type" yaml:"type"`
}

type SpecDistributionModulesIngressNginxTLS struct {
	// Provider corresponds to the JSON schema field "provider".
	Provider SpecDistributionModulesIngressNginxTLSProvider `json:"provider" yaml:"provider"`

	// Secret corresponds to the JSON schema field "secret".
	Secret *SpecDistributionModulesIngressNginxTLSSecret `json:"secret,omitempty" yaml:"secret,omitempty"`
}

type SpecDistributionModulesIngressNginxTLSProvider string

const SpecDistributionModulesIngressNginxTLSProviderCertManager SpecDistributionModulesIngressNginxTLSProvider = "certManager"
const SpecDistributionModulesIngressNginxTLSProviderNone SpecDistributionModulesIngressNginxTLSProvider = "none"
const SpecDistributionModulesIngressNginxTLSProviderSecret SpecDistributionModulesIngressNginxTLSProvider = "secret"

type SpecDistributionModulesIngressNginxTLSSecret struct {
	// Ca corresponds to the JSON schema field "ca".
	Ca string `json:"ca" yaml:"ca"`

	// Cert corresponds to the JSON schema field "cert".
	Cert string `json:"cert" yaml:"cert"`

	// Key corresponds to the JSON schema field "key".
	Key string `json:"key" yaml:"key"`
}

type SpecDistributionModulesIngressNginxType string

const SpecDistributionModulesIngressNginxTypeDual SpecDistributionModulesIngressNginxType = "dual"
const SpecDistributionModulesIngressNginxTypeSingle SpecDistributionModulesIngressNginxType = "single"

type SpecDistributionModulesIngressOverrides struct {
	// Ingresses corresponds to the JSON schema field "ingresses".
	Ingresses *SpecDistributionModulesIngressOverridesIngresses `json:"ingresses,omitempty" yaml:"ingresses,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector TypesKubeNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []TypesKubeToleration `json:"tolerations,omitempty" yaml:"tolerations,omitempty"`
}

type SpecDistributionModulesIngressOverridesIngresses struct {
	// Forecastle corresponds to the JSON schema field "forecastle".
	Forecastle *TypesFuryModuleOverridesIngress `json:"forecastle,omitempty" yaml:"forecastle,omitempty"`
}

type SpecDistributionModulesLogging struct {
	// Opensearch corresponds to the JSON schema field "opensearch".
	Opensearch SpecDistributionModulesLoggingOpensearch `json:"opensearch" yaml:"opensearch"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *TypesFuryModuleOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`
}

type SpecDistributionModulesLoggingOpensearch struct {
	// Resources corresponds to the JSON schema field "resources".
	Resources *TypesKubeResources `json:"resources,omitempty" yaml:"resources,omitempty"`

	// StorageSize corresponds to the JSON schema field "storageSize".
	StorageSize *string `json:"storageSize,omitempty" yaml:"storageSize,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type SpecDistributionModulesLoggingOpensearchType `json:"type" yaml:"type"`
}

type SpecDistributionModulesLoggingOpensearchType string

const SpecDistributionModulesLoggingOpensearchTypeSingle SpecDistributionModulesLoggingOpensearchType = "single"
const SpecDistributionModulesLoggingOpensearchTypeTriple SpecDistributionModulesLoggingOpensearchType = "triple"

type SpecDistributionModulesMonitoring struct {
	// Alertmanager corresponds to the JSON schema field "alertmanager".
	Alertmanager *SpecDistributionModulesMonitoringAlertManager `json:"alertmanager,omitempty" yaml:"alertmanager,omitempty"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *TypesFuryModuleOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`

	// Prometheus corresponds to the JSON schema field "prometheus".
	Prometheus *SpecDistributionModulesMonitoringPrometheus `json:"prometheus,omitempty" yaml:"prometheus,omitempty"`
}

type SpecDistributionModulesMonitoringAlertManager struct {
	// DeadManSwitchWebhookUrl corresponds to the JSON schema field
	// "deadManSwitchWebhookUrl".
	DeadManSwitchWebhookUrl *string `json:"deadManSwitchWebhookUrl,omitempty" yaml:"deadManSwitchWebhookUrl,omitempty"`

	// SlackWebhookUrl corresponds to the JSON schema field "slackWebhookUrl".
	SlackWebhookUrl *string `json:"slackWebhookUrl,omitempty" yaml:"slackWebhookUrl,omitempty"`
}

type SpecDistributionModulesMonitoringPrometheus struct {
	// Resources corresponds to the JSON schema field "resources".
	Resources *TypesKubeResources `json:"resources,omitempty" yaml:"resources,omitempty"`

	// RetentionSize corresponds to the JSON schema field "retentionSize".
	RetentionSize *string `json:"retentionSize,omitempty" yaml:"retentionSize,omitempty"`

	// RetentionTime corresponds to the JSON schema field "retentionTime".
	RetentionTime *string `json:"retentionTime,omitempty" yaml:"retentionTime,omitempty"`

	// StorageSize corresponds to the JSON schema field "storageSize".
	StorageSize *string `json:"storageSize,omitempty" yaml:"storageSize,omitempty"`
}

type SpecDistributionModulesPolicy struct {
	// Gatekeeper corresponds to the JSON schema field "gatekeeper".
	Gatekeeper *SpecDistributionModulesPolicyGatekeeper `json:"gatekeeper,omitempty" yaml:"gatekeeper,omitempty"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides *TypesFuryModuleOverrides `json:"overrides,omitempty" yaml:"overrides,omitempty"`
}

type SpecDistributionModulesPolicyGatekeeper struct {
	// AdditionalExcludedNamespaces corresponds to the JSON schema field
	// "additionalExcludedNamespaces".
	AdditionalExcludedNamespaces []string `json:"additionalExcludedNamespaces,omitempty" yaml:"additionalExcludedNamespaces,omitempty"`
}

type SpecInfrastructure struct {
	// Vpc corresponds to the JSON schema field "vpc".
	Vpc *SpecInfrastructureVpc `json:"vpc,omitempty" yaml:"vpc,omitempty"`
}

type SpecInfrastructureVpc struct {
	// Network corresponds to the JSON schema field "network".
	Network SpecInfrastructureVpcNetwork `json:"network" yaml:"network"`

	// Vpn corresponds to the JSON schema field "vpn".
	Vpn *SpecInfrastructureVpcVpn `json:"vpn,omitempty" yaml:"vpn,omitempty"`
}

type SpecInfrastructureVpcNetwork struct {
	// Cidr corresponds to the JSON schema field "cidr".
	Cidr TypesCidr `json:"cidr" yaml:"cidr"`

	// SubnetsCidrs corresponds to the JSON schema field "subnetsCidrs".
	SubnetsCidrs SpecInfrastructureVpcNetworkSubnetsCidrs `json:"subnetsCidrs" yaml:"subnetsCidrs"`
}

type SpecInfrastructureVpcNetworkSubnetsCidrs struct {
	// Private corresponds to the JSON schema field "private".
	Private []TypesCidr `json:"private" yaml:"private"`

	// Public corresponds to the JSON schema field "public".
	Public []TypesCidr `json:"public" yaml:"public"`
}

type SpecInfrastructureVpcVpn struct {
	// DhParamsBits corresponds to the JSON schema field "dhParamsBits".
	DhParamsBits *int `json:"dhParamsBits,omitempty" yaml:"dhParamsBits,omitempty"`

	// DiskSize corresponds to the JSON schema field "diskSize".
	DiskSize *int `json:"diskSize,omitempty" yaml:"diskSize,omitempty"`

	// InstanceType corresponds to the JSON schema field "instanceType".
	InstanceType *string `json:"instanceType,omitempty" yaml:"instanceType,omitempty"`

	// Instances corresponds to the JSON schema field "instances".
	Instances *int `json:"instances,omitempty" yaml:"instances,omitempty"`

	// OperatorName corresponds to the JSON schema field "operatorName".
	OperatorName *string `json:"operatorName,omitempty" yaml:"operatorName,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *TypesTcpPort `json:"port,omitempty" yaml:"port,omitempty"`

	// Ssh corresponds to the JSON schema field "ssh".
	Ssh SpecInfrastructureVpcVpnSsh `json:"ssh" yaml:"ssh"`

	// VpnClientsSubnetCidr corresponds to the JSON schema field
	// "vpnClientsSubnetCidr".
	VpnClientsSubnetCidr TypesCidr `json:"vpnClientsSubnetCidr" yaml:"vpnClientsSubnetCidr"`
}

type SpecInfrastructureVpcVpnSsh struct {
	// AllowedFromCidrs corresponds to the JSON schema field "allowedFromCidrs".
	AllowedFromCidrs []TypesCidr `json:"allowedFromCidrs" yaml:"allowedFromCidrs"`

	// GithubUsersName corresponds to the JSON schema field "githubUsersName".
	GithubUsersName []string `json:"githubUsersName" yaml:"githubUsersName"`

	// PublicKeys corresponds to the JSON schema field "publicKeys".
	PublicKeys []interface{} `json:"publicKeys" yaml:"publicKeys"`
}

type SpecKubernetes struct {
	// ApiServerEndpointAccess corresponds to the JSON schema field
	// "apiServerEndpointAccess".
	ApiServerEndpointAccess *SpecKubernetesAPIServerEndpointAccess `json:"apiServerEndpointAccess,omitempty" yaml:"apiServerEndpointAccess,omitempty"`

	// AwsAuth corresponds to the JSON schema field "awsAuth".
	AwsAuth *SpecKubernetesAwsAuth `json:"awsAuth,omitempty" yaml:"awsAuth,omitempty"`

	// LogRetentionDays corresponds to the JSON schema field "logRetentionDays".
	LogRetentionDays *int `json:"logRetentionDays,omitempty" yaml:"logRetentionDays,omitempty"`

	// NodeAllowedSshPublicKey corresponds to the JSON schema field
	// "nodeAllowedSshPublicKey".
	NodeAllowedSshPublicKey interface{} `json:"nodeAllowedSshPublicKey" yaml:"nodeAllowedSshPublicKey"`

	// NodePools corresponds to the JSON schema field "nodePools".
	NodePools []SpecKubernetesNodePool `json:"nodePools" yaml:"nodePools"`

	// NodePoolsLaunchKind corresponds to the JSON schema field "nodePoolsLaunchKind".
	NodePoolsLaunchKind SpecKubernetesNodePoolsLaunchKind `json:"nodePoolsLaunchKind" yaml:"nodePoolsLaunchKind"`

	// SubnetIds corresponds to the JSON schema field "subnetIds".
	SubnetIds []TypesAwsSubnetId `json:"subnetIds,omitempty" yaml:"subnetIds,omitempty"`

	// VpcId corresponds to the JSON schema field "vpcId".
	VpcId *TypesAwsVpcId `json:"vpcId,omitempty" yaml:"vpcId,omitempty"`
}

type SpecKubernetesAPIServerEndpointAccess struct {
	// AllowedCidrs corresponds to the JSON schema field "allowedCidrs".
	AllowedCidrs []TypesCidr `json:"allowedCidrs" yaml:"allowedCidrs"`

	// Type corresponds to the JSON schema field "type".
	Type SpecKubernetesAPIServerEndpointAccessType `json:"type" yaml:"type"`
}

type SpecKubernetesAPIServerEndpointAccessType string

const SpecKubernetesAPIServerEndpointAccessTypePrivate SpecKubernetesAPIServerEndpointAccessType = "private"
const SpecKubernetesAPIServerEndpointAccessTypePublic SpecKubernetesAPIServerEndpointAccessType = "public"
const SpecKubernetesAPIServerEndpointAccessTypePublicAndPrivate SpecKubernetesAPIServerEndpointAccessType = "public_and_private"

type SpecKubernetesAwsAuth struct {
	// AdditionalAccounts corresponds to the JSON schema field "additionalAccounts".
	AdditionalAccounts []string `json:"additionalAccounts,omitempty" yaml:"additionalAccounts,omitempty"`

	// Roles corresponds to the JSON schema field "roles".
	Roles []SpecKubernetesAwsAuthRole `json:"roles,omitempty" yaml:"roles,omitempty"`

	// Users corresponds to the JSON schema field "users".
	Users []SpecKubernetesAwsAuthUser `json:"users,omitempty" yaml:"users,omitempty"`
}

type SpecKubernetesAwsAuthRole struct {
	// Groups corresponds to the JSON schema field "groups".
	Groups []string `json:"groups" yaml:"groups"`

	// Rolearn corresponds to the JSON schema field "rolearn".
	Rolearn TypesAwsArn `json:"rolearn" yaml:"rolearn"`

	// Username corresponds to the JSON schema field "username".
	Username string `json:"username" yaml:"username"`
}

type SpecKubernetesAwsAuthUser struct {
	// Groups corresponds to the JSON schema field "groups".
	Groups []string `json:"groups" yaml:"groups"`

	// Userarn corresponds to the JSON schema field "userarn".
	Userarn TypesAwsArn `json:"userarn" yaml:"userarn"`

	// Username corresponds to the JSON schema field "username".
	Username string `json:"username" yaml:"username"`
}

type SpecKubernetesNodePool struct {
	// AdditionalFirewallRules corresponds to the JSON schema field
	// "additionalFirewallRules".
	AdditionalFirewallRules []SpecKubernetesNodePoolAdditionalFirewallRule `json:"additionalFirewallRules,omitempty" yaml:"additionalFirewallRules,omitempty"`

	// Ami corresponds to the JSON schema field "ami".
	Ami *SpecKubernetesNodePoolAmi `json:"ami,omitempty" yaml:"ami,omitempty"`

	// AttachedTargetGroups corresponds to the JSON schema field
	// "attachedTargetGroups".
	AttachedTargetGroups []TypesAwsArn `json:"attachedTargetGroups,omitempty" yaml:"attachedTargetGroups,omitempty"`

	// Instance corresponds to the JSON schema field "instance".
	Instance SpecKubernetesNodePoolInstance `json:"instance" yaml:"instance"`

	// Labels corresponds to the JSON schema field "labels".
	Labels TypesKubeLabels `json:"labels,omitempty" yaml:"labels,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Size corresponds to the JSON schema field "size".
	Size SpecKubernetesNodePoolSize `json:"size" yaml:"size"`

	// SubnetIds corresponds to the JSON schema field "subnetIds".
	SubnetIds []TypesAwsSubnetId `json:"subnetIds,omitempty" yaml:"subnetIds,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags TypesAwsTags `json:"tags,omitempty" yaml:"tags,omitempty"`

	// Taints corresponds to the JSON schema field "taints".
	Taints TypesKubeTaints `json:"taints,omitempty" yaml:"taints,omitempty"`
}

type SpecKubernetesNodePoolAdditionalFirewallRule struct {
	// CidrBlocks corresponds to the JSON schema field "cidrBlocks".
	CidrBlocks []TypesCidr `json:"cidrBlocks" yaml:"cidrBlocks"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Ports corresponds to the JSON schema field "ports".
	Ports SpecKubernetesNodePoolAdditionalFirewallRulePorts `json:"ports" yaml:"ports"`

	// Protocol corresponds to the JSON schema field "protocol".
	Protocol TypesAwsIpProtocol `json:"protocol" yaml:"protocol"`

	// Tags corresponds to the JSON schema field "tags".
	Tags TypesAwsTags `json:"tags,omitempty" yaml:"tags,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type SpecKubernetesNodePoolAdditionalFirewallRuleType `json:"type" yaml:"type"`
}

type SpecKubernetesNodePoolAdditionalFirewallRulePorts struct {
	// From corresponds to the JSON schema field "from".
	From TypesTcpPort `json:"from" yaml:"from"`

	// To corresponds to the JSON schema field "to".
	To TypesTcpPort `json:"to" yaml:"to"`
}

type SpecKubernetesNodePoolAdditionalFirewallRuleType string

const SpecKubernetesNodePoolAdditionalFirewallRuleTypeEgress SpecKubernetesNodePoolAdditionalFirewallRuleType = "egress"
const SpecKubernetesNodePoolAdditionalFirewallRuleTypeIngress SpecKubernetesNodePoolAdditionalFirewallRuleType = "ingress"

type SpecKubernetesNodePoolAmi struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id"`

	// Owner corresponds to the JSON schema field "owner".
	Owner string `json:"owner" yaml:"owner"`
}

type SpecKubernetesNodePoolInstance struct {
	// Spot corresponds to the JSON schema field "spot".
	Spot *bool `json:"spot,omitempty" yaml:"spot,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type"`

	// VolumeSize corresponds to the JSON schema field "volumeSize".
	VolumeSize *int `json:"volumeSize,omitempty" yaml:"volumeSize,omitempty"`
}

type SpecKubernetesNodePoolSize struct {
	// Max corresponds to the JSON schema field "max".
	Max int `json:"max" yaml:"max"`

	// Min corresponds to the JSON schema field "min".
	Min int `json:"min" yaml:"min"`
}

type SpecKubernetesNodePoolsLaunchKind string

const SpecKubernetesNodePoolsLaunchKindBoth SpecKubernetesNodePoolsLaunchKind = "both"
const SpecKubernetesNodePoolsLaunchKindLaunchConfigurations SpecKubernetesNodePoolsLaunchKind = "launch_configurations"
const SpecKubernetesNodePoolsLaunchKindLaunchTemplates SpecKubernetesNodePoolsLaunchKind = "launch_templates"

type SpecToolsConfiguration struct {
	// Terraform corresponds to the JSON schema field "terraform".
	Terraform SpecToolsConfigurationTerraform `json:"terraform" yaml:"terraform"`
}

type SpecToolsConfigurationTerraform struct {
	// State corresponds to the JSON schema field "state".
	State SpecToolsConfigurationTerraformState `json:"state" yaml:"state"`
}

type SpecToolsConfigurationTerraformState struct {
	// S3 corresponds to the JSON schema field "s3".
	S3 SpecToolsConfigurationTerraformStateS3 `json:"s3" yaml:"s3"`
}

type SpecToolsConfigurationTerraformStateS3 struct {
	// BucketName corresponds to the JSON schema field "bucketName".
	BucketName TypesAwsS3BucketName `json:"bucketName" yaml:"bucketName"`

	// KeyPrefix corresponds to the JSON schema field "keyPrefix".
	KeyPrefix TypesAwsS3KeyPrefix `json:"keyPrefix" yaml:"keyPrefix"`

	// Region corresponds to the JSON schema field "region".
	Region TypesAwsRegion `json:"region" yaml:"region"`
}

type TypesAwsArn string

type TypesAwsIpProtocol string

type TypesAwsRegion string

const TypesAwsRegionAfSouth1 TypesAwsRegion = "af-south-1"
const TypesAwsRegionApEast1 TypesAwsRegion = "ap-east-1"
const TypesAwsRegionApNortheast1 TypesAwsRegion = "ap-northeast-1"
const TypesAwsRegionApNortheast2 TypesAwsRegion = "ap-northeast-2"
const TypesAwsRegionApNortheast3 TypesAwsRegion = "ap-northeast-3"
const TypesAwsRegionApSouth1 TypesAwsRegion = "ap-south-1"
const TypesAwsRegionApSoutheast1 TypesAwsRegion = "ap-southeast-1"
const TypesAwsRegionApSoutheast2 TypesAwsRegion = "ap-southeast-2"
const TypesAwsRegionApSoutheast3 TypesAwsRegion = "ap-southeast-3"
const TypesAwsRegionCaCentral1 TypesAwsRegion = "ca-central-1"
const TypesAwsRegionEuCentral1 TypesAwsRegion = "eu-central-1"
const TypesAwsRegionEuNorth1 TypesAwsRegion = "eu-north-1"
const TypesAwsRegionEuSouth1 TypesAwsRegion = "eu-south-1"
const TypesAwsRegionEuWest1 TypesAwsRegion = "eu-west-1"
const TypesAwsRegionEuWest2 TypesAwsRegion = "eu-west-2"
const TypesAwsRegionEuWest3 TypesAwsRegion = "eu-west-3"
const TypesAwsRegionMeCentral1 TypesAwsRegion = "me-central-1"
const TypesAwsRegionMeSouth1 TypesAwsRegion = "me-south-1"
const TypesAwsRegionSaEast1 TypesAwsRegion = "sa-east-1"
const TypesAwsRegionUsEast1 TypesAwsRegion = "us-east-1"
const TypesAwsRegionUsEast2 TypesAwsRegion = "us-east-2"
const TypesAwsRegionUsWest1 TypesAwsRegion = "us-west-1"
const TypesAwsRegionUsWest2 TypesAwsRegion = "us-west-2"

type TypesAwsS3BucketName string

type TypesAwsS3KeyPrefix string

type TypesAwsSshPubKey string

type TypesAwsSubnetId string

type TypesAwsTags map[string]string

type TypesAwsVpcId string

type TypesCidr string

type TypesEnvRef string

type TypesFileRef string

type TypesFuryModuleOverrides struct {
	// Ingresses corresponds to the JSON schema field "ingresses".
	Ingresses TypesFuryModuleOverridesIngresses `json:"ingresses,omitempty" yaml:"ingresses,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector TypesKubeNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []TypesKubeToleration `json:"tolerations,omitempty" yaml:"tolerations,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuth) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["provider"]; !ok || v == nil {
		return fmt.Errorf("field provider in SpecDistributionModulesAuth: required")
	}
	type Plain SpecDistributionModulesAuth
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuth(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesLoggingOpensearchType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecDistributionModulesLoggingOpensearchType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecDistributionModulesLoggingOpensearchType, v)
	}
	*j = SpecDistributionModulesLoggingOpensearchType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesLogging) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["opensearch"]; !ok || v == nil {
		return fmt.Errorf("field opensearch in SpecDistributionModulesLogging: required")
	}
	type Plain SpecDistributionModulesLogging
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesLogging(plain)
	return nil
}

var enumValues_SpecDistributionModulesLoggingOpensearchType = []interface{}{
	"single",
	"triple",
}

type TypesKubeResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits *TypesKubeResourcesLimits `json:"limits,omitempty" yaml:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *TypesKubeResourcesRequests `json:"requests,omitempty" yaml:"requests,omitempty"`
}

type TypesKubeResourcesRequests struct {
	// Cpu corresponds to the JSON schema field "cpu".
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory *string `json:"memory,omitempty" yaml:"memory,omitempty"`
}

type TypesKubeResourcesLimits struct {
	// Cpu corresponds to the JSON schema field "cpu".
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory *string `json:"memory,omitempty" yaml:"memory,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngress) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["baseDomain"]; !ok || v == nil {
		return fmt.Errorf("field baseDomain in SpecDistributionModulesIngress: required")
	}
	if v, ok := raw["dns"]; !ok || v == nil {
		return fmt.Errorf("field dns in SpecDistributionModulesIngress: required")
	}
	if v, ok := raw["nginx"]; !ok || v == nil {
		return fmt.Errorf("field nginx in SpecDistributionModulesIngress: required")
	}
	type Plain SpecDistributionModulesIngress
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngress(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesDrVeleroEks) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["bucketName"]; !ok || v == nil {
		return fmt.Errorf("field bucketName in SpecDistributionModulesDrVeleroEks: required")
	}
	if v, ok := raw["iamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field iamRoleArn in SpecDistributionModulesDrVeleroEks: required")
	}
	if v, ok := raw["region"]; !ok || v == nil {
		return fmt.Errorf("field region in SpecDistributionModulesDrVeleroEks: required")
	}
	type Plain SpecDistributionModulesDrVeleroEks
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesDrVeleroEks(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModules) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dr"]; !ok || v == nil {
		return fmt.Errorf("field dr in SpecDistributionModules: required")
	}
	if v, ok := raw["ingress"]; !ok || v == nil {
		return fmt.Errorf("field ingress in SpecDistributionModules: required")
	}
	if v, ok := raw["logging"]; !ok || v == nil {
		return fmt.Errorf("field logging in SpecDistributionModules: required")
	}
	type Plain SpecDistributionModules
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModules(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesDrVelero) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["eks"]; !ok || v == nil {
		return fmt.Errorf("field eks in SpecDistributionModulesDrVelero: required")
	}
	type Plain SpecDistributionModulesDrVelero
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesDrVelero(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistribution) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["modules"]; !ok || v == nil {
		return fmt.Errorf("field modules in SpecDistribution: required")
	}
	type Plain SpecDistribution
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistribution(plain)
	return nil
}

type TypesSemVer string

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesDr) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["velero"]; !ok || v == nil {
		return fmt.Errorf("field velero in SpecDistributionModulesDr: required")
	}
	type Plain SpecDistributionModulesDr
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesDr(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressNginx) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecDistributionModulesIngressNginx: required")
	}
	type Plain SpecDistributionModulesIngressNginx
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressNginx(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecInfrastructureVpcNetworkSubnetsCidrs) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["private"]; !ok || v == nil {
		return fmt.Errorf("field private in SpecInfrastructureVpcNetworkSubnetsCidrs: required")
	}
	if v, ok := raw["public"]; !ok || v == nil {
		return fmt.Errorf("field public in SpecInfrastructureVpcNetworkSubnetsCidrs: required")
	}
	type Plain SpecInfrastructureVpcNetworkSubnetsCidrs
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecInfrastructureVpcNetworkSubnetsCidrs(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressClusterIssuerRoute53) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["hostedZoneId"]; !ok || v == nil {
		return fmt.Errorf("field hostedZoneId in SpecDistributionModulesIngressClusterIssuerRoute53: required")
	}
	if v, ok := raw["iamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field iamRoleArn in SpecDistributionModulesIngressClusterIssuerRoute53: required")
	}
	if v, ok := raw["region"]; !ok || v == nil {
		return fmt.Errorf("field region in SpecDistributionModulesIngressClusterIssuerRoute53: required")
	}
	type Plain SpecDistributionModulesIngressClusterIssuerRoute53
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressClusterIssuerRoute53(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecInfrastructureVpcNetwork) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["cidr"]; !ok || v == nil {
		return fmt.Errorf("field cidr in SpecInfrastructureVpcNetwork: required")
	}
	if v, ok := raw["subnetsCidrs"]; !ok || v == nil {
		return fmt.Errorf("field subnetsCidrs in SpecInfrastructureVpcNetwork: required")
	}
	type Plain SpecInfrastructureVpcNetwork
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecInfrastructureVpcNetwork(plain)
	return nil
}

type TypesTcpPort int

var enumValues_SpecDistributionModulesIngressCertManagerClusterIssuerType = []interface{}{
	"dns01",
	"http01",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecInfrastructureVpcVpnSsh) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["allowedFromCidrs"]; !ok || v == nil {
		return fmt.Errorf("field allowedFromCidrs in SpecInfrastructureVpcVpnSsh: required")
	}
	if v, ok := raw["githubUsersName"]; !ok || v == nil {
		return fmt.Errorf("field githubUsersName in SpecInfrastructureVpcVpnSsh: required")
	}
	if v, ok := raw["publicKeys"]; !ok || v == nil {
		return fmt.Errorf("field publicKeys in SpecInfrastructureVpcVpnSsh: required")
	}
	type Plain SpecInfrastructureVpcVpnSsh
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.GithubUsersName) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "githubUsersName", 1)
	}
	*j = SpecInfrastructureVpcVpnSsh(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressCertManagerClusterIssuerType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecDistributionModulesIngressCertManagerClusterIssuerType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecDistributionModulesIngressCertManagerClusterIssuerType, v)
	}
	*j = SpecDistributionModulesIngressCertManagerClusterIssuerType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecInfrastructureVpcVpn) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ssh"]; !ok || v == nil {
		return fmt.Errorf("field ssh in SpecInfrastructureVpcVpn: required")
	}
	if v, ok := raw["vpnClientsSubnetCidr"]; !ok || v == nil {
		return fmt.Errorf("field vpnClientsSubnetCidr in SpecInfrastructureVpcVpn: required")
	}
	type Plain SpecInfrastructureVpcVpn
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecInfrastructureVpcVpn(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressNginxType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecDistributionModulesIngressNginxType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecDistributionModulesIngressNginxType, v)
	}
	*j = SpecDistributionModulesIngressNginxType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecInfrastructureVpc) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["network"]; !ok || v == nil {
		return fmt.Errorf("field network in SpecInfrastructureVpc: required")
	}
	type Plain SpecInfrastructureVpc
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecInfrastructureVpc(plain)
	return nil
}

var enumValues_SpecDistributionModulesIngressNginxType = []interface{}{
	"single",
	"dual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressCertManagerClusterIssuer) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["email"]; !ok || v == nil {
		return fmt.Errorf("field email in SpecDistributionModulesIngressCertManagerClusterIssuer: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SpecDistributionModulesIngressCertManagerClusterIssuer: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecDistributionModulesIngressCertManagerClusterIssuer: required")
	}
	type Plain SpecDistributionModulesIngressCertManagerClusterIssuer
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressCertManagerClusterIssuer(plain)
	return nil
}

var enumValues_SpecKubernetesAPIServerEndpointAccessType = []interface{}{
	"public",
	"private",
	"public_and_private",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesAPIServerEndpointAccessType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecKubernetesAPIServerEndpointAccessType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecKubernetesAPIServerEndpointAccessType, v)
	}
	*j = SpecKubernetesAPIServerEndpointAccessType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TypesAwsRegion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TypesAwsRegion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TypesAwsRegion, v)
	}
	*j = TypesAwsRegion(v)
	return nil
}

var enumValues_TypesAwsRegion = []interface{}{
	"af-south-1",
	"ap-east-1",
	"ap-northeast-1",
	"ap-northeast-2",
	"ap-northeast-3",
	"ap-south-1",
	"ap-southeast-1",
	"ap-southeast-2",
	"ap-southeast-3",
	"ca-central-1",
	"eu-central-1",
	"eu-north-1",
	"eu-south-1",
	"eu-west-1",
	"eu-west-2",
	"eu-west-3",
	"me-central-1",
	"me-south-1",
	"sa-east-1",
	"us-east-1",
	"us-east-2",
	"us-west-1",
	"us-west-2",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressNginxTLS) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["provider"]; !ok || v == nil {
		return fmt.Errorf("field provider in SpecDistributionModulesIngressNginxTLS: required")
	}
	type Plain SpecDistributionModulesIngressNginxTLS
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressNginxTLS(plain)
	return nil
}

var enumValues_SpecDistributionModulesIngressNginxTLSProvider = []interface{}{
	"certManager",
	"secret",
	"none",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesAPIServerEndpointAccess) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["allowedCidrs"]; !ok || v == nil {
		return fmt.Errorf("field allowedCidrs in SpecKubernetesAPIServerEndpointAccess: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecKubernetesAPIServerEndpointAccess: required")
	}
	type Plain SpecKubernetesAPIServerEndpointAccess
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.AllowedCidrs) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "allowedCidrs", 1)
	}
	*j = SpecKubernetesAPIServerEndpointAccess(plain)
	return nil
}

type TypesFuryModuleOverridesIngresses map[string]TypesFuryModuleOverridesIngress

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesAwsAuthRole) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["groups"]; !ok || v == nil {
		return fmt.Errorf("field groups in SpecKubernetesAwsAuthRole: required")
	}
	if v, ok := raw["rolearn"]; !ok || v == nil {
		return fmt.Errorf("field rolearn in SpecKubernetesAwsAuthRole: required")
	}
	if v, ok := raw["username"]; !ok || v == nil {
		return fmt.Errorf("field username in SpecKubernetesAwsAuthRole: required")
	}
	type Plain SpecKubernetesAwsAuthRole
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesAwsAuthRole(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TypesFuryModuleOverridesIngress) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["disableAuth"]; !ok || v == nil {
		return fmt.Errorf("field disableAuth in TypesFuryModuleOverridesIngress: required")
	}
	if v, ok := raw["host"]; !ok || v == nil {
		return fmt.Errorf("field host in TypesFuryModuleOverridesIngress: required")
	}
	if v, ok := raw["ingressClass"]; !ok || v == nil {
		return fmt.Errorf("field ingressClass in TypesFuryModuleOverridesIngress: required")
	}
	type Plain TypesFuryModuleOverridesIngress
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TypesFuryModuleOverridesIngress(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesAwsAuthUser) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["groups"]; !ok || v == nil {
		return fmt.Errorf("field groups in SpecKubernetesAwsAuthUser: required")
	}
	if v, ok := raw["userarn"]; !ok || v == nil {
		return fmt.Errorf("field userarn in SpecKubernetesAwsAuthUser: required")
	}
	if v, ok := raw["username"]; !ok || v == nil {
		return fmt.Errorf("field username in SpecKubernetesAwsAuthUser: required")
	}
	type Plain SpecKubernetesAwsAuthUser
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesAwsAuthUser(plain)
	return nil
}

type TypesFuryModuleOverridesIngress struct {
	// DisableAuth corresponds to the JSON schema field "disableAuth".
	DisableAuth bool `json:"disableAuth" yaml:"disableAuth"`

	// Host corresponds to the JSON schema field "host".
	Host string `json:"host" yaml:"host"`

	// IngressClass corresponds to the JSON schema field "ingressClass".
	IngressClass string `json:"ingressClass" yaml:"ingressClass"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAwsLoadBalancerController) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["iamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field iamRoleArn in SpecDistributionModulesAwsLoadBalancerController: required")
	}
	type Plain SpecDistributionModulesAwsLoadBalancerController
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAwsLoadBalancerController(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolAdditionalFirewallRulePorts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["from"]; !ok || v == nil {
		return fmt.Errorf("field from in SpecKubernetesNodePoolAdditionalFirewallRulePorts: required")
	}
	if v, ok := raw["to"]; !ok || v == nil {
		return fmt.Errorf("field to in SpecKubernetesNodePoolAdditionalFirewallRulePorts: required")
	}
	type Plain SpecKubernetesNodePoolAdditionalFirewallRulePorts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesNodePoolAdditionalFirewallRulePorts(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAwsEbsCsiDriver) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["iamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field iamRoleArn in SpecDistributionModulesAwsEbsCsiDriver: required")
	}
	type Plain SpecDistributionModulesAwsEbsCsiDriver
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAwsEbsCsiDriver(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressCertManager) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["clusterIssuer"]; !ok || v == nil {
		return fmt.Errorf("field clusterIssuer in SpecDistributionModulesIngressCertManager: required")
	}
	type Plain SpecDistributionModulesIngressCertManager
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressCertManager(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAwsClusterAutoScaler) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["iamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field iamRoleArn in SpecDistributionModulesAwsClusterAutoScaler: required")
	}
	type Plain SpecDistributionModulesAwsClusterAutoScaler
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAwsClusterAutoScaler(plain)
	return nil
}

var enumValues_SpecKubernetesNodePoolAdditionalFirewallRuleType = []interface{}{
	"ingress",
	"egress",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolAdditionalFirewallRuleType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecKubernetesNodePoolAdditionalFirewallRuleType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecKubernetesNodePoolAdditionalFirewallRuleType, v)
	}
	*j = SpecKubernetesNodePoolAdditionalFirewallRuleType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesLoggingOpensearch) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecDistributionModulesLoggingOpensearch: required")
	}
	type Plain SpecDistributionModulesLoggingOpensearch
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesLoggingOpensearch(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthProvider) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecDistributionModulesAuthProvider: required")
	}
	type Plain SpecDistributionModulesAuthProvider
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuthProvider(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthProviderType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecDistributionModulesAuthProviderType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecDistributionModulesAuthProviderType, v)
	}
	*j = SpecDistributionModulesAuthProviderType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolAdditionalFirewallRule) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["cidrBlocks"]; !ok || v == nil {
		return fmt.Errorf("field cidrBlocks in SpecKubernetesNodePoolAdditionalFirewallRule: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SpecKubernetesNodePoolAdditionalFirewallRule: required")
	}
	if v, ok := raw["ports"]; !ok || v == nil {
		return fmt.Errorf("field ports in SpecKubernetesNodePoolAdditionalFirewallRule: required")
	}
	if v, ok := raw["protocol"]; !ok || v == nil {
		return fmt.Errorf("field protocol in SpecKubernetesNodePoolAdditionalFirewallRule: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecKubernetesNodePoolAdditionalFirewallRule: required")
	}
	type Plain SpecKubernetesNodePoolAdditionalFirewallRule
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.CidrBlocks) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "cidrBlocks", 1)
	}
	*j = SpecKubernetesNodePoolAdditionalFirewallRule(plain)
	return nil
}

var enumValues_SpecDistributionModulesAuthProviderType = []interface{}{
	"none",
	"basicAuth",
	"sso",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolAmi) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in SpecKubernetesNodePoolAmi: required")
	}
	if v, ok := raw["owner"]; !ok || v == nil {
		return fmt.Errorf("field owner in SpecKubernetesNodePoolAmi: required")
	}
	type Plain SpecKubernetesNodePoolAmi
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesNodePoolAmi(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthProviderBasicAuth) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password in SpecDistributionModulesAuthProviderBasicAuth: required")
	}
	if v, ok := raw["username"]; !ok || v == nil {
		return fmt.Errorf("field username in SpecDistributionModulesAuthProviderBasicAuth: required")
	}
	type Plain SpecDistributionModulesAuthProviderBasicAuth
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuthProviderBasicAuth(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolInstance) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecKubernetesNodePoolInstance: required")
	}
	type Plain SpecKubernetesNodePoolInstance
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesNodePoolInstance(plain)
	return nil
}

type TypesKubeLabels map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthPomerium) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["policy"]; !ok || v == nil {
		return fmt.Errorf("field policy in SpecDistributionModulesAuthPomerium: required")
	}
	if v, ok := raw["secrets"]; !ok || v == nil {
		return fmt.Errorf("field secrets in SpecDistributionModulesAuthPomerium: required")
	}
	type Plain SpecDistributionModulesAuthPomerium
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuthPomerium(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolSize) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max"]; !ok || v == nil {
		return fmt.Errorf("field max in SpecKubernetesNodePoolSize: required")
	}
	if v, ok := raw["min"]; !ok || v == nil {
		return fmt.Errorf("field min in SpecKubernetesNodePoolSize: required")
	}
	type Plain SpecKubernetesNodePoolSize
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesNodePoolSize(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressNginxTLSSecret) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ca"]; !ok || v == nil {
		return fmt.Errorf("field ca in SpecDistributionModulesIngressNginxTLSSecret: required")
	}
	if v, ok := raw["cert"]; !ok || v == nil {
		return fmt.Errorf("field cert in SpecDistributionModulesIngressNginxTLSSecret: required")
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key in SpecDistributionModulesIngressNginxTLSSecret: required")
	}
	type Plain SpecDistributionModulesIngressNginxTLSSecret
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressNginxTLSSecret(plain)
	return nil
}

type TypesKubeTaints []string

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthPomeriumSecrets) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["COOKIE_SECRET"]; !ok || v == nil {
		return fmt.Errorf("field COOKIE_SECRET in SpecDistributionModulesAuthPomeriumSecrets: required")
	}
	if v, ok := raw["IDP_CLIENT_SECRET"]; !ok || v == nil {
		return fmt.Errorf("field IDP_CLIENT_SECRET in SpecDistributionModulesAuthPomeriumSecrets: required")
	}
	if v, ok := raw["SHARED_SECRET"]; !ok || v == nil {
		return fmt.Errorf("field SHARED_SECRET in SpecDistributionModulesAuthPomeriumSecrets: required")
	}
	type Plain SpecDistributionModulesAuthPomeriumSecrets
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuthPomeriumSecrets(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePool) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["instance"]; !ok || v == nil {
		return fmt.Errorf("field instance in SpecKubernetesNodePool: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SpecKubernetesNodePool: required")
	}
	if v, ok := raw["size"]; !ok || v == nil {
		return fmt.Errorf("field size in SpecKubernetesNodePool: required")
	}
	type Plain SpecKubernetesNodePool
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetesNodePool(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthOverridesIngress) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["host"]; !ok || v == nil {
		return fmt.Errorf("field host in SpecDistributionModulesAuthOverridesIngress: required")
	}
	if v, ok := raw["ingressClass"]; !ok || v == nil {
		return fmt.Errorf("field ingressClass in SpecDistributionModulesAuthOverridesIngress: required")
	}
	type Plain SpecDistributionModulesAuthOverridesIngress
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuthOverridesIngress(plain)
	return nil
}

var enumValues_SpecKubernetesNodePoolsLaunchKind = []interface{}{
	"launch_configurations",
	"launch_templates",
	"both",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetesNodePoolsLaunchKind) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecKubernetesNodePoolsLaunchKind {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecKubernetesNodePoolsLaunchKind, v)
	}
	*j = SpecKubernetesNodePoolsLaunchKind(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesAuthDex) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["connectors"]; !ok || v == nil {
		return fmt.Errorf("field connectors in SpecDistributionModulesAuthDex: required")
	}
	type Plain SpecDistributionModulesAuthDex
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesAuthDex(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TypesKubeToleration) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["effect"]; !ok || v == nil {
		return fmt.Errorf("field effect in TypesKubeToleration: required")
	}
	if v, ok := raw["key"]; !ok || v == nil {
		return fmt.Errorf("field key in TypesKubeToleration: required")
	}
	if v, ok := raw["value"]; !ok || v == nil {
		return fmt.Errorf("field value in TypesKubeToleration: required")
	}
	type Plain TypesKubeToleration
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TypesKubeToleration(plain)
	return nil
}

type TypesKubeToleration struct {
	// Effect corresponds to the JSON schema field "effect".
	Effect TypesKubeTolerationEffect `json:"effect" yaml:"effect"`

	// Key corresponds to the JSON schema field "key".
	Key string `json:"key" yaml:"key"`

	// Value corresponds to the JSON schema field "value".
	Value string `json:"value" yaml:"value"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressDNSPrivate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["create"]; !ok || v == nil {
		return fmt.Errorf("field create in SpecDistributionModulesIngressDNSPrivate: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SpecDistributionModulesIngressDNSPrivate: required")
	}
	if v, ok := raw["vpcId"]; !ok || v == nil {
		return fmt.Errorf("field vpcId in SpecDistributionModulesIngressDNSPrivate: required")
	}
	type Plain SpecDistributionModulesIngressDNSPrivate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressDNSPrivate(plain)
	return nil
}

const TypesKubeTolerationEffectNoExecute TypesKubeTolerationEffect = "NoExecute"

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecKubernetes) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["nodeAllowedSshPublicKey"]; !ok || v == nil {
		return fmt.Errorf("field nodeAllowedSshPublicKey in SpecKubernetes: required")
	}
	if v, ok := raw["nodePools"]; !ok || v == nil {
		return fmt.Errorf("field nodePools in SpecKubernetes: required")
	}
	if v, ok := raw["nodePoolsLaunchKind"]; !ok || v == nil {
		return fmt.Errorf("field nodePoolsLaunchKind in SpecKubernetes: required")
	}
	type Plain SpecKubernetes
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecKubernetes(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressDNSPublic) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["create"]; !ok || v == nil {
		return fmt.Errorf("field create in SpecDistributionModulesIngressDNSPublic: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SpecDistributionModulesIngressDNSPublic: required")
	}
	type Plain SpecDistributionModulesIngressDNSPublic
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressDNSPublic(plain)
	return nil
}

const TypesKubeTolerationEffectPreferNoSchedule TypesKubeTolerationEffect = "PreferNoSchedule"

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecToolsConfigurationTerraformStateS3) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["bucketName"]; !ok || v == nil {
		return fmt.Errorf("field bucketName in SpecToolsConfigurationTerraformStateS3: required")
	}
	if v, ok := raw["keyPrefix"]; !ok || v == nil {
		return fmt.Errorf("field keyPrefix in SpecToolsConfigurationTerraformStateS3: required")
	}
	if v, ok := raw["region"]; !ok || v == nil {
		return fmt.Errorf("field region in SpecToolsConfigurationTerraformStateS3: required")
	}
	type Plain SpecToolsConfigurationTerraformStateS3
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecToolsConfigurationTerraformStateS3(plain)
	return nil
}

const TypesKubeTolerationEffectNoSchedule TypesKubeTolerationEffect = "NoSchedule"

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecToolsConfigurationTerraformState) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["s3"]; !ok || v == nil {
		return fmt.Errorf("field s3 in SpecToolsConfigurationTerraformState: required")
	}
	type Plain SpecToolsConfigurationTerraformState
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecToolsConfigurationTerraformState(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TypesKubeTolerationEffect) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TypesKubeTolerationEffect {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TypesKubeTolerationEffect, v)
	}
	*j = TypesKubeTolerationEffect(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecToolsConfigurationTerraform) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["state"]; !ok || v == nil {
		return fmt.Errorf("field state in SpecToolsConfigurationTerraform: required")
	}
	type Plain SpecToolsConfigurationTerraform
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecToolsConfigurationTerraform(plain)
	return nil
}

var enumValues_TypesKubeTolerationEffect = []interface{}{
	"NoSchedule",
	"PreferNoSchedule",
	"NoExecute",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecToolsConfiguration) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["terraform"]; !ok || v == nil {
		return fmt.Errorf("field terraform in SpecToolsConfiguration: required")
	}
	type Plain SpecToolsConfiguration
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecToolsConfiguration(plain)
	return nil
}

type TypesKubeTolerationEffect string

// UnmarshalJSON implements json.Unmarshaler.
func (j *Spec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["distribution"]; !ok || v == nil {
		return fmt.Errorf("field distribution in Spec: required")
	}
	if v, ok := raw["distributionVersion"]; !ok || v == nil {
		return fmt.Errorf("field distributionVersion in Spec: required")
	}
	if v, ok := raw["kubernetes"]; !ok || v == nil {
		return fmt.Errorf("field kubernetes in Spec: required")
	}
	if v, ok := raw["region"]; !ok || v == nil {
		return fmt.Errorf("field region in Spec: required")
	}
	if v, ok := raw["toolsConfiguration"]; !ok || v == nil {
		return fmt.Errorf("field toolsConfiguration in Spec: required")
	}
	type Plain Spec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Spec(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressDNS) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["private"]; !ok || v == nil {
		return fmt.Errorf("field private in SpecDistributionModulesIngressDNS: required")
	}
	if v, ok := raw["public"]; !ok || v == nil {
		return fmt.Errorf("field public in SpecDistributionModulesIngressDNS: required")
	}
	type Plain SpecDistributionModulesIngressDNS
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressDNS(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressExternalDNS) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["privateIamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field privateIamRoleArn in SpecDistributionModulesIngressExternalDNS: required")
	}
	if v, ok := raw["publicIamRoleArn"]; !ok || v == nil {
		return fmt.Errorf("field publicIamRoleArn in SpecDistributionModulesIngressExternalDNS: required")
	}
	type Plain SpecDistributionModulesIngressExternalDNS
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionModulesIngressExternalDNS(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionModulesIngressNginxTLSProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SpecDistributionModulesIngressNginxTLSProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SpecDistributionModulesIngressNginxTLSProvider, v)
	}
	*j = SpecDistributionModulesIngressNginxTLSProvider(v)
	return nil
}

type TypesIpAddress string

type TypesSshPubKey string

type TypesUri string

// UnmarshalJSON implements json.Unmarshaler.
func (j *SpecDistributionCommonProvider) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in SpecDistributionCommonProvider: required")
	}
	type Plain SpecDistributionCommonProvider
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SpecDistributionCommonProvider(plain)
	return nil
}

var enumValues_EksclusterKfdV1Alpha2Kind = []interface{}{
	"EKSCluster",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EksclusterKfdV1Alpha2Kind) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EksclusterKfdV1Alpha2Kind {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EksclusterKfdV1Alpha2Kind, v)
	}
	*j = EksclusterKfdV1Alpha2Kind(v)
	return nil
}

type TypesKubeNodeSelector map[string]string

// UnmarshalJSON implements json.Unmarshaler.
func (j *Metadata) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Metadata: required")
	}
	type Plain Metadata
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Metadata(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EksclusterKfdV1Alpha2) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["apiVersion"]; !ok || v == nil {
		return fmt.Errorf("field apiVersion in EksclusterKfdV1Alpha2: required")
	}
	if v, ok := raw["kind"]; !ok || v == nil {
		return fmt.Errorf("field kind in EksclusterKfdV1Alpha2: required")
	}
	if v, ok := raw["metadata"]; !ok || v == nil {
		return fmt.Errorf("field metadata in EksclusterKfdV1Alpha2: required")
	}
	if v, ok := raw["spec"]; !ok || v == nil {
		return fmt.Errorf("field spec in EksclusterKfdV1Alpha2: required")
	}
	type Plain EksclusterKfdV1Alpha2
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EksclusterKfdV1Alpha2(plain)
	return nil
}
